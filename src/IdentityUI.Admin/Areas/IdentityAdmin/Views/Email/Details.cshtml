@using SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Views.Shared.Components.SettingMenu
@model SSRD.IdentityUI.Admin.Areas.IdentityAdmin.Models.Setting.Email.EmailViewModel

@{
    SidebarSelection.SelectedOption = SidebarOptions.Setting;
}

@{
    ViewData["Title"] = "Email";
}

@section style {
<style>
    .preview-iframe {
        border: none;
        min-height: 400px;
        max-height: 600px;
        padding: 0px;
    }
</style>
}

@section script{
    <script src="~/identityAdmin/app/setting/send-test-email.js"></script>
    <script>
        $(document).ready(() => {
            new EmailDetails();
        });

        class EmailDetails {
            constructor() {
                this.statusAlert = new StatusAlertComponent('#status-alert-container');

                this.$previewModal = $('#email-preview-modal');

                this.$bodyTextArea = $('#body-textarea');
                this.$previewIframe = $('#preview-iframe');

                $('#preview-button').on('click', () => {
                    this.showPreview();
                });

                this.$previewModal.on('hidden.bs.modal', () => {
                    this.hidePreview();
                });

                @if (Model.StatusAlert != null)
                {
                    <text>
                        if ('@Model.StatusAlert.Success' === 'True')
                        {
                            this.statusAlert.showSuccess(@Json.Serialize(Model.StatusAlert.Messages));
                        }
                        else
                        {
                            this.statusAlert.showError(@Json.Serialize(Model.StatusAlert.Messages));
                        }
                    </text>
                }
            }

            showPreview() {
                const body = this.$bodyTextArea.val();

                var iDoc = this.$previewIframe[0].contentDocument;

                iDoc.open();
                iDoc.write(body);
                iDoc.close();

                this.$previewModal.modal('show');
            }

            hidePreview() {
                this.$previewModal.modal('hide');
            }
        }
    </script>

}

<div id="email-preview-modal" class="modal fade bd-example-modal-lg" role="dialog" aria-labelledby="email-preview-modal" style="display: none;" aria-hidden="true">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Email Preview</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">×</span>
                </button>
            </div>
            <div class="modal-body audit-modal-body">
                <iframe id="preview-iframe" title="Email Preview" class="col-12 preview-iframe"></iframe>
            </div>
        </div>
    </div>
</div>

<div>
    @(await Component.InvokeAsync("SettingMenu", new SettingMenuViewComponent.ViewModel("Email", SettingMenuViewComponent.TabSelected.Email)))

    <div id="status-alert-container">
        @await Component.InvokeAsync("IdentityStatusAlertJs")
    </div>

    @if (Model.UseEmailSender)
    {
        @await Component.InvokeAsync("SendTestEmailModal")
    }

    <div class="tab-content">
        <div class="main-card mb-3 card col-xl-6 offset-xl-3 col-lg-12">
            <div class="card-body">
                <div class="card-title-space">
                    <h5 class="card-title">
                        Details
                    </h5>
                    @if (Model.UseEmailSender)
                    {
                        <button id="send-test-email" class="header-button">Send Test Email</button>
                    }
                </div>
                <form asp-controller="Email" asp-action="Edit" asp-route-id="@Model.Id" method="post" class="custom-form">
                    <div class="form-group">
                        <label asp-for="Type" class="control-label"></label>
                        <input asp-for="Type" class="form-control disabled" disabled />
                        <span asp-validation-for="Type" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <label asp-for="Subject" class="control-label"></label>
                        <input asp-for="Subject" class="form-control" />
                        <span asp-validation-for="Subject" class="text-danger"></span>
                    </div>
                    <div class="form-group">
                        <div class="d-flex">
                            <label asp-for="Body" class="control-label"></label>
                            <button id="preview-button" type="button" class="btn btn-link p-2 d-flex ml-auto reset-button">Preview</button>
                        </div>
                        <textarea id="body-textarea" asp-for="Body" class="form-control vertical-textarea" rows="10"></textarea>
                        <span asp-validation-for="Body" class="text-danger"></span>
                    </div>
                    <div class="button-holder">
                        <input type="submit" value="Edit" class="btn btn-primary custom-submit" />
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>